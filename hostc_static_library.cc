/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYenerated
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*!
 * \author : River
 * \file hostc_static_library.cc derived from dso_library.cc
 * \brief create static library module to load/get function pointers of hostc code from the interfaces.
 * \generated by codegen
 */
#include <tvm/runtime/module.h>
#include <tvm/runtime/memory.h>
#include <tvm/runtime/registry.h>
#include <tvm/runtime/packed_func.h>
#include "library_module.h"


//Include code generated files
#include "tvm/runtime/c_runtime_api.h"
#include <hostc_fused_func.h>
#include <codegen_fused_fp.h>

//ADD by River 20200710
//void* __tvm_module_ctx;

namespace tvm {
namespace runtime {

// hostc static libary.
// This is the default module TVM used for host-side AOT
class HostCStaticLibrary final : public Library {
 public:
  ~HostCStaticLibrary() {
    if (lib_handle_) Unload();
  }
  //Init and setup function pointers of host c code
  //ADD by River 20200701
  void Init(const std::string& name) {
    //Load(name);
	setup_fp();
	//MOD by River 20200710

	//if (auto *ctx_addr = reinterpret_cast<void**>(GetSymbol(runtime::symbol::tvm_module_ctx))) {
	//    *ctx_addr = this;
	//}
	//__tvm_module_ctx = this;

  }
  //
  void* GetSymbol(const char* name) final {
    //return GetSymbol_(name);
	return lookup_fp(name);
  }

 private:
  // Platform dependent handling.
#if defined(_WIN32)
  // library handle
  HMODULE lib_handle_{nullptr};

  void* GetSymbol_(const char* name) {
    return reinterpret_cast<void*>(
        GetProcAddress(lib_handle_, (LPCSTR)name)); // NOLINT(*)
  }

  // Load the library
  //Init and setup function pointers of host c code
  void Load(const std::string& name) {
    // use wstring version that is needed by LLVM.
    std::wstring wname(name.begin(), name.end());
    lib_handle_ = LoadLibraryW(wname.c_str());
    CHECK(lib_handle_ != nullptr)
        << "Failed to load dynamic shared library " << name;
  }

  void Unload() {
    FreeLibrary(lib_handle_);
    lib_handle_ = nullptr;
  }
#else
  // Library handle
  void* lib_handle_{nullptr};
  // load the library
  //Init and setup function pointers of host c code by River
  void Load(const std::string& name) {
    //lib_handle_ = dlopen(name.c_str(), RTLD_LAZY | RTLD_LOCAL);
	//lib_handle_ = dlopen(NULL, RTLD_LAZY | RTLD_LOCAL);

	lib_handle_ = nullptr;
    //Test by River 20200630
    //setup_fp();
    //End Test by River 20200630
    //CHECK(lib_handle_ != nullptr)
    //    << "Failed to load dynamic shared library " << name
    //    << " " << dlerror();
  }

  void* GetSymbol_(const char* name) {
    //return dlsym(lib_handle_, name);
	  return nullptr;
  }

  void Unload() {
    //dlclose(lib_handle_);
    lib_handle_ = nullptr;
  }
#endif
};

TVM_REGISTER_GLOBAL("runtime.module.hostc_static")
.set_body([](TVMArgs args, TVMRetValue* rv) {
    auto n = make_object<HostCStaticLibrary>();
    n->Init(args[0]);
    *rv = CreateModuleFromLibrary(n);
  });
}  // namespace runtime
}  // namespace tvm
